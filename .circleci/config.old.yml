version: 2.1

orbs:
  docker: circleci/docker@0.5.20
  jq: circleci/jq@2.2.0
  # IMPORTANT: When creating a module, use a fix version of the orb, not dev:alpha
  jahia-modules-orb: jahia/jahia-modules-orb@dev:alpha

# Parameters are available across the entire config file and can be used with this syntax: << pipeline.parameters.THE_PARAMETER >>
# Avoid using project-specific variables in the jobs or steps.
# Instead, declare those as pipeline parameters (At the top of the config file).
# This eases portability of the config file across different modules
parameters:
  AUDITCI_LEVEL:
    type: string
    default: "moderate"
  TESTS_PATH:
    type: string
    default: "tests/"
  TESTS_IMAGE_NAME:
    type: string
    default: "jahia/sandbox"
  TESTS_IMAGE_TAG:
    type: string
    default: "latest"   
  TESTS_MANIFEST: # Manifest to be executed by the test container when triggered from an API call
    type: string
    default: ""
  TESTS_CONTAINER_BRANCH: 
    type: string
    default: ""
  MODULE_ID:
    type: string
    default: "sandbox"
  TESTRAIL_PROJECTNAME:
    type: string
    default: "Sandbox Module"
  TESTRAIL_MILESTONE:
    type: string
    default: "Default"    
  GITHUB_SLUG:
    type: string
    default: "jahia/sandbox"
  PRIMARY_RELEASE_BRANCH:
    type: string
    default: "main" # main or master ? set the branch for the main release
  JAHIA_IMAGE:
    type: string
    default: "jahia/jahia-ee-dev:8-SNAPSHOT"    
  JAHIA_SUPER_USER_PASSWORD:
    type: string
    default: "root1234"
  RELEASE_ID:
    type: string
    default: ""
  RELEASE_VERSION:
    type: string
    default: ""
  IS_RELEASE:
    type: boolean
    default: false
  IS_ROLLBACK:
    type: boolean
    default: false
  IS_MANUAL_TESTRUN: # Was the workflow triggered by an API call ?
    type: boolean
    default: false
  SHOULD_SKIP_ARTIFACTS:
    type: boolean
    default: true    
  SHOULD_BUILD_TEST_IMAGE: # Should the test image be build from the branch codebase ?
    type: boolean
    default: false
  SHOULD_SKIP_TESTRAIL:
    type: boolean
    default: true
  SHOULD_SKIP_NOTIFICATIONS: 
    type: boolean
    default: true  
  SHOULD_SKIP_ZENCREPES: 
    type: boolean
    default: false           
  UPDATE_SIGNATURE:
    type: boolean
    default: false

commands:
  generate_cachekey_seed:
    description: Generate Cache Key Seeds
    steps:
      - run:
          name: Generate Cache Key Seeds
          command: |
            find . -name 'pom.xml' | sort | xargs cat > ~/source/maven_cache_seed
            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]; then
              echo "true" > ~/source/is_pr
            else
              echo "false" > ~/source/is_pr
            fi

references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .

jobs:
  generate-changelog:
    <<: *workdir
    docker: # run the steps with Docker
      - image: cimg/node:14.15
    resource_class: xlarge
    steps:
      - checkout
      - *attach-workspace
      - add_ssh_keys:
          fingerprints:
            - "29:01:4c:71:59:29:c4:65:45:1d:95:1b:59:31:fd:b4"
      - run:
          name: Setting up github configuration
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Update Changelog
          command: |
            yarn
            yarn add auto
            GH_TOKEN=${GITHUB_API_TOKEN} yarn auto changelog
            git push --set-upstream origin $CIRCLE_BRANCH
      - *persist-workspace

  release:
    <<: *workdir
    docker: # run the steps with Docker
      - image: cimg/openjdk:8.0.275-node
    resource_class: xlarge
    steps:
      - checkout
      - generate_cachekey_seed
      - restore_cache:
          keys:
            - v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
            # fallback to using the latest cache if no exact match is found
            - v1-maven-dependencies-
      - add_ssh_keys:
          fingerprints:
            - "29:01:4c:71:59:29:c4:65:45:1d:95:1b:59:31:fd:b4"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Delete github tag <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
            git tag --delete <<pipeline.parameters.RELEASE_VERSION>>
            git push --delete origin <<pipeline.parameters.RELEASE_VERSION>>
      - run:
          name: Release prepare version for <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            FINAL_RELEASE_VERSION=$(echo <<pipeline.parameters.RELEASE_VERSION>> | cut -d'-' -f 1)
            MAJOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f1`
            MINOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f2`
            REVISION=`echo $FINAL_RELEASE_VERSION | cut -d. -f3`

            if [[ "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" == "master"  || "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" == "main"  ||  "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" =~ ^[0-9]_x$ ]]; then
             NEXT_MINOR_VERSION=`expr $MINOR_VERSION + 1`
             NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$NEXT_MINOR_VERSION.0"-SNAPSHOT
            else
              NEXT_REVISION=`expr $REVISION + 1`
              NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
            fi

            mvn -s .circleci/.circleci.settings.xml -B -Dtag=$FINAL_RELEASE_VERSION release:prepare -DreleaseVersion=$FINAL_RELEASE_VERSION -DdevelopmentVersion="$NEXT_DEVELOPMENT_VERSION"
      - save_cache:
          # need to match rollback cache key on restore
          key: v1-rollback-<<pipeline.parameters.RELEASE_ID>>
          paths:
            - pom.xml.releaseBackup
            - release.properties
      - run:
          name: Update github release for id << pipeline.parameters.RELEASE_ID >>
          command: |
            yarn
            yarn add auto
            GH_TOKEN=${GITHUB_API_TOKEN} yarn auto changelog
            curl -X PATCH \
            -H "Accept:application/vnd.github.v3+json" \
            -d "{\"tag_name\":\"<<pipeline.parameters.RELEASE_VERSION>>\", \"prerelease\": false, \"draft\": false}" -u \
            jahia-ci:$GITHUB_API_TOKEN https://api.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>
            curl \
            -H "Content-Type: $(file -b --mime-type CHANGELOG.md)" \
            -u jahia-ci:$GITHUB_API_TOKEN  \
            --data-binary @CHANGELOG.md \
            "https://uploads.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>/assets?name=$(basename CHANGELOG.md)"
      - run:
          name: Perform release
          command: |
            mvn -s .circleci/.circleci.settings.xml release:perform -Prelease-to-staging-repository -DscmCommentPrefix="[skip ci] [maven-release-plugin]"
      - run:
          name: Copy artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/

  update-signature:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275-node
    parameters:
      KEYMAKER_VERSION:
        type: string
        default: "2.0"
      KEYMAKER_LOCATION:
        type: string
        default: "org/jahia/keymaker/keymaker-cli"
      KEYMAKER_NAME:
        type: string
        default: "keymaker-cli"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "29:01:4c:71:59:29:c4:65:45:1d:95:1b:59:31:fd:b4"
      - run:
          name: Setting up github configuration
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            echo "Handling if this job was re-ran"
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Downloading keymaker artifacts
          command: |
            mkdir -p target/keymaker
            url="${NEXUS_ENTERPRISE_RELEASES_URL}/content/<<parameters.KEYMAKER_LOCATION>>/<<parameters.KEYMAKER_VERSION>>/<<parameters.KEYMAKER_NAME>>-<<parameters.KEYMAKER_VERSION>>-jar-with-dependencies.jar"
            curl --header "Authorization: Basic $(echo -n "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" | base64)" \
                --url "${url}" \
                --output "target/keymaker/<<parameters.KEYMAKER_NAME>>.jar"
            KEYMAKER_CLI_JAR="$(pwd)/target/keymaker/<<parameters.KEYMAKER_NAME>>.jar"
            echo "export KEYMAKER_CLI_JAR=${KEYMAKER_CLI_JAR}" >> $BASH_ENV
            . $BASH_ENV
      - run:
          name: Handling signature update for single or multiple submodules
          command: |
            root_dir=$(pwd)
            packaging_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout | xargs)
            if [[ ${packaging_type} == "pom" ]]; then
              project_modules=($(mvn -q --also-make exec:exec -Dexec.executable="pwd"))
              for module in ${project_modules[@]:1}; do
                if [[ ${module} != ${root_dir} ]]; then
                  cd $module
                  group_id=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | xargs)
                  parent_group_id=$(mvn help:evaluate -Dexpression=project.parent.groupId -q -DforceStdout | xargs)
                  project_name=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout | xargs)
                  packaging_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout | xargs | xargs)
                  if [[ ${packaging_type} == "bundle" ]]; then
                    KEYMAKER_CLI_OUTPUT=`java -jar ${KEYMAKER_CLI_JAR} pom -f pom.xml -s`
                    if [[ ${group_id} == "org.jahia.modules" || ${parent_group_id} == "org.jahia.modules" ]]; then
                      if [[ $(echo $KEYMAKER_CLI_OUTPUT | grep -w "Signature valid" | wc -l) != "1" ]]; then
                        sed -i -e "s%<\(.*\)Jahia-Signature>.*</%<\1Jahia-Signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
                        sed -i -e "s%<\(.*\)jahia-module-signature>.*</%<\1jahia-module-signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
                        git add pom.xml && git commit -m "[ci skip] Update signature for ${project_name}"
                        git push -u origin ${CIRCLE_BRANCH}
                      else
                        echo "Signature is up-to-date."
                      fi
                    else
                      echo "This project is not a Jahia module."
                    fi
                  else
                    echo "Ignoring project ${project_name} b/c it's a ${packaging_type} packaging type"
                  fi
                  cd -
                fi
              done
            else
              echo "There are no submodules in this project"
            fi
      - run:
          name: Handling signature for a single module
          command: |
            packaging_type=$(mvn help:evaluate -Dexpression=project.packaging -q -DforceStdout | xargs)
            echo "Packing type: ${packaging_type}"
            if [[ ${packaging_type} == "bundle" ]]; then
              group_id=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | xargs)
              parent_group_id=$(mvn help:evaluate -Dexpression=project.parent.groupId -q -DforceStdout | xargs)
              project_name=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout | xargs)
              if [[ ${group_id} != "org.jahia.modules" && ${parent_group_id} != "org.jahia.modules" ]]; then
                echo "Project is not a Jahia modules"
                circleci-agent step halt
              else
                KEYMAKER_CLI_OUTPUT=`java -jar ${KEYMAKER_CLI_JAR} pom -f pom.xml -s`
                if [[ $(echo $KEYMAKER_CLI_OUTPUT | grep -w "Signature valid" | wc -l) == "1" ]]; then
                  echo "Signature is already up-to-date"
                  circleci-agent step halt
                else
                  echo "New signature: ${KEYMAKER_CLI_OUTPUT}"
                  sed -i -e "s%<\(.*\)Jahia-Signature>.*</%<\1Jahia-Signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
                  sed -i -e "s%<\(.*\)jahia-module-signature>.*</%<\1jahia-module-signature>${KEYMAKER_CLI_OUTPUT}</%" pom.xml
                  git add pom.xml && git commit -m "[ci skip] Updated signature for ${project_name}"
                  git push -u origin ${CIRCLE_BRANCH}
                fi
              fi
            else
              echo "There are submodule(s) in this projects"
            fi

  rollback:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275-node
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-rollback-<<pipeline.parameters.RELEASE_ID>>
      - run:
          name: Setup github
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
      - run:
          name: Rollback release <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            if [ -f pom.xml.releaseBackup ] && [ -f release.properties ]; then
              mvn -s .circleci/.circleci.settings.xml release:rollback
            else
              echo "Error: rollback artifacts don't exist"
              exit 1
            fi
      - run:
          name: Delete github tag <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            git tag --delete <<pipeline.parameters.RELEASE_VERSION>>
            git push --delete origin <<pipeline.parameters.RELEASE_VERSION>>

  release-publication:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275-node
    resource_class: large
    steps:
      - jq/install
      - run:
          name: Retrieve staging repository ID and promote staging repository to release on Nexus
          command: |
            curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -H "Accept: application/json" https://devtools.jahia.com/nexus/service/local/staging/profile_repositories > staging-repos.json
            stagingRepositoryId=$(cat staging-repos.json | jq '.data[] | select(.description|test("<< pipeline.parameters.MODULE_ID >>:<< pipeline.parameters.RELEASE_VERSION >>")) | .repositoryId')
            echo "Staging repository being promoted: ${stagingRepositoryId}"
            curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -H "Accept: application/json" -H "Content-Type: application/json" -d "{\"data\":{\"autoDropAfterRelease\":true, \"stagedRepositoryIds\":[${stagingRepositoryId}]}}" https://devtools.jahia.com/nexus/service/local/staging/bulk/promote

  release-cancellation:
    <<: *workdir
    docker:
      - image: cimg/openjdk:8.0.275-node
    resource_class: large
    steps:
      - jq/install
      - run:
          name: Retrieve staging repository ID and drop staging repository on Nexus
          command: |
            curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -H "Accept: application/json" https://devtools.jahia.com/nexus/service/local/staging/profile_repositories > staging-repos.json
            stagingRepositoryId=$(cat staging-repos.json | jq '.data[] | select(.description|test("<< pipeline.parameters.MODULE_ID >>:<< pipeline.parameters.RELEASE_VERSION >>")) | .repositoryId')
            echo "Staging repository being dropped: ${stagingRepositoryId}"
            curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -H "Accept: application/json" -H "Content-Type: application/json" -d "{\"data\":{\"stagedRepositoryIds\":[${stagingRepositoryId}]}}" https://devtools.jahia.com/nexus/service/local/staging/bulk/drop
      - run:
          name: Cancel the on-hold release workflow
          command: |
            on_release_id=$(curl -G "https://circleci.com/api/v2/pipeline/<<pipeline.id>>/workflow" -H "Circle-Token: $CIRCLECI_PIPELINE_LAUNCH_TOKEN"|jq -rs '.[].items[]|select(.name == "on-release")|.id')
            curl -X POST "https://circleci.com/api/v2/workflow/$on_release_id/cancel" -H "Circle-Token: $CIRCLECI_PIPELINE_LAUNCH_TOKEN"

workflows:
  # On code change is executed each time new code is pushed to a branch
  # Current project configuration in circleci only builds on PR + main, so effectively this is only being executed
  on-code-change:
    unless:
      or:
        - << pipeline.parameters.IS_RELEASE >>
        - << pipeline.parameters.IS_ROLLBACK >>
        - << pipeline.parameters.UPDATE_SIGNATURE >>
        - << pipeline.parameters.IS_MANUAL_TESTRUN >> 
    jobs:
      - jahia-modules-orb/initialize
      - update-signature:
          pre-steps:
            - checkout
            - run:
                name: Verifying if signature needs to be updated
                command: |
                  commit_message=$(git log -1 HEAD --pretty=format:%s)
                  if [[ $commit_message != *"[ci sign]"* \
                     && $commit_message != *"[sign ci]"* \
                     && $commit_message != *"[jahia update signature]"* ]]; then
                    echo "Signature update has not been requested. Proceeding without updating the signature"
                    circleci-agent step halt
                  fi
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
      - jahia-modules-orb/static-analysis:
          requires:
            - jahia-modules-orb/initialize          
      - jahia-modules-orb/build:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
            - jahia-modules-orb/static-analysis
            - update-signature
      - jahia-modules-orb/sonar-analysis:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/build          
          primary_release_branch: << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
          module_id: << pipeline.parameters.MODULE_ID >>
          github_slug: << pipeline.parameters.GITHUB_SLUG >>

      - jahia-modules-orb/publish:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/build
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>

      - jahia-modules-orb/integration-tests:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/build
          jahia_image: jahia/jahia-ee-dev:8-SNAPSHOT
          tests_manifest: provisioning-manifest-build.yml
          module_id: << pipeline.parameters.MODULE_ID >> 
          testrail_project: << pipeline.parameters.TESTRAIL_PROJECTNAME >> 
          testrail_milestone: << pipeline.parameters.TESTRAIL_MILESTONE >>          

  # The on-release workflow was created to handle the full release lifecycle after creating a release using GitHub
  # https://github.com/Jahia/sandbox/releases
  # The release is first created using the "pre-release" tag and a pipeline is triggered from a GitHub action
  # This pipeline perform the following action:
  # - Delete the tag created by GitHub (unnecessary)
  # - Run mvn release:prepare
  # - Generate the changelog using auto (https://www.npmjs.com/package/auto)
  # - Run mvn release:perform
  on-release:
    when: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - jahia-modules-orb/initialize:
          name: initialize
      - generate-changelog:
          context: QA_ENVIRONMENT
          requires:
            - initialize
      - release:
          context: QA_ENVIRONMENT
          requires:
            - generate-changelog
      - update-signature:
          context: QA_ENVIRONMENT
          requires:
            - release
      - wait-for-approval:
          type: approval
          context: QA_ENVIRONMENT
          requires:
            - release
      - release-publication:
          context: QA_ENVIRONMENT
          requires:
            - wait-for-approval

  # The on-rollback workflow was created to handle release rollback when a release has been deleted from Github
  # The rollback pipeline/job performs the following action:
  # - restore rollback artifact cache created from the release job
  # - Run mvn:rollback 
  # - Delete github tag associated with the release
  on-rollback:
    when: << pipeline.parameters.IS_ROLLBACK >>
    jobs:
      - rollback:
          context: QA_ENVIRONMENT
      - release-cancellation:
          context: QA_ENVIRONMENT
          requires:
            - rollback

  # The on-signature-update workflow was created to handle the signage of modules in case it needs to be done manually.
  # https://github.com/Jahia/sandbox#manually-updating-signature-via-command-line
  # The pipeline performs the following action:
  # - Check the commit message that it contains [ci sign], [sign ci] or [jahia update signature]
  # - Downloads the keymaker cli (version 2.0)
  # - Obtain the new signature using the keymaker cli
  # - Update the pom.xml
  # - Push changes back to github
  on-signature-update:
    when: << pipeline.parameters.UPDATE_SIGNATURE >>
    jobs:
      - update-signature:
          pre-steps:
            - checkout
            - run:
                name: Verifying if signature needs to be updated
                command: |
                  commit_message=$(git log -1 HEAD --pretty=format:%s)
                  if [[ $commit_message != *"[ci sign]"* \
                     && $commit_message != *"[sign ci]"* \
                     && $commit_message != *"[jahia update signature]"* ]]; then
                    echo "Signature update has not been requested. Proceeding without updating the signature"
                    circleci-agent step halt
                  fi
          context: QA_ENVIRONMENT

  # The manual-run workflow was created to allow the triggering of an integration testing run using CircleCI pipeline API
  manual-run:
    when: << pipeline.parameters.IS_MANUAL_TESTRUN >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/integration-tests:
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
          jahia_image: << pipeline.parameters.JAHIA_IMAGE >>
          tests_manifest: << pipeline.parameters.TESTS_MANIFEST >>
          tests_container_branch: << pipeline.parameters.TESTS_CONTAINER_BRANCH >>
          module_id: << pipeline.parameters.MODULE_ID >> 
          testrail_project: << pipeline.parameters.TESTRAIL_PROJECTNAME >> 
          testrail_milestone: << pipeline.parameters.TESTRAIL_MILESTONE >>
          should_skip_artifacts: << pipeline.parameters.SHOULD_SKIP_ARTIFACTS >>
          should_skip_testrail: << pipeline.parameters.SHOULD_SKIP_TESTRAIL >>
          should_skip_notifications: << pipeline.parameters.SHOULD_SKIP_NOTIFICATIONS >>
          should_skip_zencrepes: << pipeline.parameters.SHOULD_SKIP_ZENCREPES >>

  # The objective of nightly runs is to ensure the codebase still passes tests:
  # - With the latest releases version of Jahia
  # - With the current snapshot of Jahia
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - << pipeline.parameters.PRIMARY_RELEASE_BRANCH >>
    jobs:
      - jahia-modules-orb/initialize
      - jahia-modules-orb/integration-tests:
          name: Nightly-<< matrix.jahia_image >>
          context: QA_ENVIRONMENT
          requires:
            - jahia-modules-orb/initialize
          matrix:
            parameters:            
              jahia_image: ["jahia/jahia-ee:8", "jahia/jahia-ee-dev:8-SNAPSHOT"]
              tests_manifest: ["provisioning-manifest-snapshot.yml"]
              module_id: ["<< pipeline.parameters.MODULE_ID >>"]
              testrail_project: ["<< pipeline.parameters.TESTRAIL_PROJECTNAME >>"]
              testrail_milestone: ["<< matrix.jahia_image >>"]
              should_skip_artifacts: [true]
              should_skip_testrail: [false]
              should_skip_notifications: [false]
              should_skip_zencrepes: [false]